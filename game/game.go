package game

import (
	"encoding/json"
	"log"
	"math/rand"
	"net/http"
	"os"
	"strconv"
	"strings"
)

type JoueurVictoire struct {
	Nom      string `json:"nom"`
	Victoire int    `json:"victoire"`
}

type Position struct {
	Ligne int
	Col   int
}

type GameData struct {
	J1            string
	J2            string
	Tableau       [8][9]int
	Position      [1]Position
	Debut         bool
	NbTour        int
	TourJoueur    int
	Winnner       string
	GameEnd       bool
	Encouragement string
}

const Path = "data/stats.json"

func InitGame() *GameData {
	return &GameData{
		J1: "",
		J2: "",
		// d√©finition grille du p4
		// pour chercher dans la grille le premier grille[] sert √† d√©finir la ligne donc grille [0] √©gal premiere ligne hoizontale
		// et donc le deuxi√®me grille[][0] la premi√®re colonne sachant quand on cherche on part de tout en haut √† gauce
		//  - Emrick:
		// En gros grille[i][j] = un tableau de tableaux; i = ligne 1 et j = colonne 1
		Tableau: [8][9]int{
			{3, 3, 3, 3, 3, 3, 3, 3, 3}, // mur du haut
			{3, 0, 0, 0, 0, 0, 0, 0, 3},
			{3, 0, 0, 0, 0, 0, 0, 0, 3},
			{3, 0, 0, 0, 0, 0, 0, 0, 3},
			{3, 0, 0, 0, 0, 0, 0, 0, 3},
			{3, 0, 0, 0, 0, 0, 0, 0, 3},
			{3, 0, 0, 0, 0, 0, 0, 0, 3},
			{3, 3, 3, 3, 3, 3, 3, 3, 3}, // mur du bas
		},
		Position: [1]Position{
			{Ligne: 0, Col: 0},
		},
		Debut:      false,
		NbTour:     1,
		TourJoueur: 1, //1 == J1; 2 == J2
		Winnner:    "",
		GameEnd:    false,
	}
}

func Nomdesjoueurs(g *GameData) string {
	if g.TourJoueur == 1 {
		return g.J1 + " (rouge) üî¥"
	} else {
		return g.J2 + " (jaune) üü°"
	}
}

func Tour_joueur(g *GameData, r *http.Request) {

	if !g.Debut {
		log.Println("La partie n'est pas en cours.")
		return
	}
	Phrasealeatoire(g)
	colStr := r.FormValue("colonne")
	col, err := strconv.Atoi(colStr)
	if err != nil {
		log.Println("Erreur conversion colonne :", err)
		return
	}

	// V√©rifie si la colonne re√ßue est entre 1 et 7
	if col < 1 || col > 7 {
		log.Println("Colonne hors borne :", col)
		return
	}

	for ligne := 6; ligne >= 1; ligne-- {
		if g.Tableau[ligne][col] == 0 {
			g.Tableau[ligne][col] = g.TourJoueur
			g.Position[0].Col = col
			g.Position[0].Ligne = ligne
			g.NbTour++
			break
		}
	}

	if WinCheck(g, g.TourJoueur) { // Check si le joueur a gagn√©
		var player string
		if g.TourJoueur == 1 {
			player = g.J1
		} else {
			player = g.J2
		}
		g.Winnner = "Victoire de " + player + " en " + strconv.Itoa(g.NbTour-1) + " tours !"
		log.Printf("Le joueur %s gagne", player)
		g.GameEnd = true
		if err := WinLeaderboard(player); err != nil {
			log.Println("Erreur leaderboard:", err)
		}
		return
	}

	if g.NbTour == 43 { //Verif match nul si tour == 43
		g.Winnner = "Match nul"
		log.Println("Match nul")
		g.GameEnd = true
		return
	}

	// Alterne le joueur
	if g.TourJoueur == 1 {
		g.TourJoueur = 2
	} else {
		g.TourJoueur = 1
	}
}

func WinCheck(g *GameData, player int) bool {

	nb_colonnes_min := 1
	nb_colonnes_max := 7
	nb_lignes_min := 1
	nb_lignes_max := 6

	x := g.Position[0].Col
	y := g.Position[0].Ligne

	var piongagnant1 [2]int
	var piongagnant2 [2]int
	var piongagnant3 [2]int
	var piongagnant4 [2]int

	// Horizontal
	compteurHorizontal := 0
	for i := -3; i <= 3; i++ {
		col_act := x + i
		if col_act >= nb_colonnes_min && col_act <= nb_colonnes_max { // reste dans la grille
			if g.Tableau[y][col_act] == player { // pion du joueur
				switch compteurHorizontal {
				case 0:
					piongagnant1[0] = col_act
					piongagnant1[1] = y
				case 1:
					piongagnant2[0] = col_act
					piongagnant2[1] = y
				case 2:
					piongagnant3[0] = col_act
					piongagnant3[1] = y
				case 3:
					piongagnant4[0] = col_act
					piongagnant4[1] = y
				}
				compteurHorizontal++
			} else {
				compteurHorizontal = 0
			}
			if compteurHorizontal >= 4 {
				// Marquer les pions gagnants
				g.Tableau[piongagnant1[1]][piongagnant1[0]] = player + 2
				g.Tableau[piongagnant2[1]][piongagnant2[0]] = player + 2
				g.Tableau[piongagnant3[1]][piongagnant3[0]] = player + 2
				g.Tableau[piongagnant4[1]][piongagnant4[0]] = player + 2
				return true
			}
		}
	}

	// Vertical
	compteurVertical := 0
	for i := -3; i <= 3; i++ {
		ligne_act := y + i
		if ligne_act >= nb_lignes_min && ligne_act <= nb_lignes_max {
			if g.Tableau[ligne_act][x] == player {
				switch compteurVertical {
				case 0:
					piongagnant1[0] = x
					piongagnant1[1] = ligne_act
				case 1:
					piongagnant2[0] = x
					piongagnant2[1] = ligne_act
				case 2:
					piongagnant3[0] = x
					piongagnant3[1] = ligne_act
				case 3:
					piongagnant4[0] = x
					piongagnant4[1] = ligne_act
				}
				compteurVertical++
			} else {
				compteurVertical = 0
			}
			if compteurVertical >= 4 {
				g.Tableau[piongagnant1[1]][piongagnant1[0]] = player + 2
				g.Tableau[piongagnant2[1]][piongagnant2[0]] = player + 2
				g.Tableau[piongagnant3[1]][piongagnant3[0]] = player + 2
				g.Tableau[piongagnant4[1]][piongagnant4[0]] = player + 2
				return true
			}
		}
	}

	// Diagonale /
	compteurDiag1 := 0
	for i := -3; i <= 3; i++ {
		col_act := x + i
		ligne_act := y - i
		if col_act >= nb_colonnes_min && col_act <= nb_colonnes_max && ligne_act >= nb_lignes_min && ligne_act <= nb_lignes_max {
			if g.Tableau[ligne_act][col_act] == player {
				switch compteurDiag1 {
				case 0:
					piongagnant1[0] = col_act
					piongagnant1[1] = ligne_act
				case 1:
					piongagnant2[0] = col_act
					piongagnant2[1] = ligne_act
				case 2:
					piongagnant3[0] = col_act
					piongagnant3[1] = ligne_act
				case 3:
					piongagnant4[0] = col_act
					piongagnant4[1] = ligne_act
				}
				compteurDiag1++
			} else {
				compteurDiag1 = 0
			}
			if compteurDiag1 >= 4 {
				g.Tableau[piongagnant1[1]][piongagnant1[0]] = player + 2
				g.Tableau[piongagnant2[1]][piongagnant2[0]] = player + 2
				g.Tableau[piongagnant3[1]][piongagnant3[0]] = player + 2
				g.Tableau[piongagnant4[1]][piongagnant4[0]] = player + 2
				return true
			}
		}
	}

	// Diagonale \
	compteurDiag2 := 0
	for i := -3; i <= 3; i++ {
		col_act := x + i
		ligne_act := y + i
		if col_act >= nb_colonnes_min && col_act <= nb_colonnes_max && ligne_act >= nb_lignes_min && ligne_act <= nb_lignes_max {
			if g.Tableau[ligne_act][col_act] == player {
				switch compteurDiag2 {
				case 0:
					piongagnant1[0] = col_act
					piongagnant1[1] = ligne_act
				case 1:
					piongagnant2[0] = col_act
					piongagnant2[1] = ligne_act
				case 2:
					piongagnant3[0] = col_act
					piongagnant3[1] = ligne_act
				case 3:
					piongagnant4[0] = col_act
					piongagnant4[1] = ligne_act
				}
				compteurDiag2++
			} else {
				compteurDiag2 = 0
			}
			if compteurDiag2 >= 4 {
				g.Tableau[piongagnant1[1]][piongagnant1[0]] = player + 2
				g.Tableau[piongagnant2[1]][piongagnant2[0]] = player + 2
				g.Tableau[piongagnant3[1]][piongagnant3[0]] = player + 2
				g.Tableau[piongagnant4[1]][piongagnant4[0]] = player + 2
				return true
			}
		}
	}
	return false
}

func DrawCheck(g *GameData) bool {
	for ligne := 1; ligne <= 6; ligne++ {
		for colonne := 1; colonne <= 7; colonne++ {
			if g.Tableau[ligne][colonne] == 0 {
				return false
			}
		}
	}
	return true
}

func WinLeaderboard(nomGagnant string) error {
	//d√©clare une slice de joueur pour stocker les scores
	var joueurs []JoueurVictoire
	//chemin du fichier json

	//lecture du fichier json
	data, err := os.ReadFile(Path)
	if err != nil { //si erreur lors de la lecture
		return err //retourne erreur
	}

	//si le fichier a des data on essaye de parser en slice de joueur
	if len(data) > 0 {
		err := json.Unmarshal(data, &joueurs)
		if err != nil { //decode json
			return err //erreur si invalide
		}
	}

	//variable pour savoir si joueur existe deja
	existe := false

	//parcourt tous les joueurs pour voir si nomGagnant est deja present
	for i := 0; i < len(joueurs); i++ {
		if strings.EqualFold(joueurs[i].Nom, nomGagnant) { //comparaison insensible a la casse
			joueurs[i].Victoire++ //increment victoire
			existe = true         //joueur existe
			break                 //sort de la boucle
		}
	}

	//si joueur existe pas on l'ajoute
	if !existe {
		joueurs = append(joueurs, JoueurVictoire{Nom: nomGagnant, Victoire: 1})
	}

	//encode la slice en json avec indentation
	data, err = json.MarshalIndent(joueurs, "", "  ")
	if err != nil { //si erreur encode
		return err
	}

	//ecrit les datas dans le fichier
	if err := os.WriteFile(Path, data, 0644); err != nil { //0644 permissions fichier
		return err //retourne erreur si echec
	}

	//tout est ok
	return nil
}
func Phrasealeatoire(g *GameData) {

	phrase := []string{
		"T'as presque gagn√©‚Ä¶ enfin, si on compte √† l'envers.",
		"La logique est l√†, mais elle est encore en train de charger.",
		"Si Einstein voyait √ßa, il refermerait son tableau.",
		"T'es √† deux coups de la gloire‚Ä¶ ou du d√©sastre.",
		"On sent le g√©nie, mais il est un peu en RTT.",
		"Ta strat√©gie, c'est de la po√©sie incomprise.",
		"L'adversaire tremble‚Ä¶ de rire ou de peur, on sait pas encore.",
		"C'est pas perdu tant que t'as pas cri√© ‚ÄúPUISSANCE 3‚Äù.",
		"T'as un sixi√®me sens, mais il est en panne.",
		"Le cerveau chauffe, mais le r√©sultat reste ti√®de.",
		"On dirait un grand ma√Ætre d'√©chec‚Ä¶ mais dans un autre jeu.",
		"T'as mis la puissance, il manque juste le 4.",
		"La logique est une chose, le hasard en est une autre. T'as choisi la troisi√®me.",
		"Continue comme √ßa, la victoire est au coin du plateau.",
		"On sent la concentration‚Ä¶ et un peu la panique aussi.",
		"T'es pas loin de gagner, juste √† un oc√©an de cases pr√®s.",
		"Chaque jeton pos√©, c'est une √©tincelle d'espoir‚Ä¶ ou de d√©sespoir.",
		"Tactique de ninja : lente, silencieuse‚Ä¶ et parfois compl√®tement √† c√¥t√©.",
		"La chance te sourit ! Mais elle louche un peu.",
		"C'est pas une erreur, c'est une feinte de g√©nie incomprise.",
		"T'as pos√© un jeton comme un champion, dommage que ce soit le mauvais endroit.",
		"Tu joues avec le feu, mais sans extincteur.",
		"On sent la r√©flexion intense‚Ä¶ ou le vide absolu.",
		"La patience est une vertu, mais l√† c'est long.",
		"Chaque coup est un myst√®re pour l'humanit√©.",
		"Tu joues √† Puissance 4 comme si c'√©tait un Sudoku.",
		"Ton cerveau fait du sport, mais sans √©chauffement.",
		"Le plateau n'√©tait pas pr√™t pour autant de cr√©ativit√©.",
		"T'as confondu strat√©gie et freestyle.",
		"La tension est palpable, surtout chez l'adversaire.",
		"Ce n'est pas du hasard, c'est du talent mal orient√©.",
		"Si tu gagnes, ce sera historique. Si tu perds, ce sera logique.",
		"La victoire te fait coucou, mais de tr√®s loin.",
		"Tu vis dangereusement, jeton apr√®s jeton.",
		"C'est pas un move, c'est une d√©claration d'intention.",
		"On voit la strat√©gie‚Ä¶ faut juste un microscope.",
		"Tu pourrais enseigner l'art du presque.",
		"T'es √† deux doigts d'un coup de g√©nie, mais c'est pas ceux-l√†.",
		"L'adversaire doute, mais toi aussi, apparemment.",
		"Ton cerveau demande une pause caf√©.",
		"Chaque jeton pos√© te rapproche du myst√®re.",
		"Tu joues comme un philosophe, pas comme un strat√®ge.",
		"Si le but c'√©tait de faire joli, t'as gagn√©.",
		"Le plateau pleure, mais il t'encourage.",
		"T'es dans la zone‚Ä¶ juste pas la bonne.",
		"Tu fais vibrer la logique et pleurer les math√©matiques.",
		"Un coup comme √ßa, on en voit qu'en exp√©rimental.",
		"Tu vises la victoire avec un GPS cass√©.",
		"Le suspense est √† son comble, surtout pour ton prochain move.",
		"On dirait que tu joues contre le destin.",
		"C'est du grand art, dans une autre dimension.",
		"T'es pas dans le game, t'es au-dessus du game.",
		"Le plateau se souviendra de toi‚Ä¶ pas forc√©ment bien.",
		"Chaque tour, c'est une aventure √©motionnelle.",
		"Tu donnes tout, m√™me les erreurs.",
		"Le g√©nie frappe parfois, mais il t'a rat√© de peu.",
		"Ton adversaire transpire, et toi‚Ä¶ tu inspires la confusion.",
		"T'as voulu faire un pi√®ge, t'as fini par te pi√©ger.",
		"Les dieux du Puissance 4 observent, perplexes.",
		"T'as la logique d'un po√®te en pleine inspiration.",
		"Un jour, les historiens parleront de ce coup.",
		"Le chaos a trouv√© son ma√Ætre.",
		"T'as tent√© un move risqu√©, et le risque a gagn√©.",
		"Tu √©cris la l√©gende du ‚Äúpresque gagnant‚Äù.",
		"C'est pas du hasard, c'est du destin mal coordonn√©.",
		"Ton style est unique, personne n'aurait os√© √ßa.",
		"L'adversaire ne comprend plus rien, et toi non plus.",
		"T'as trouv√© un nouveau concept : la d√©faite artistique.",
		"On sent que t'y crois, c'est d√©j√† la moiti√© du chemin.",
		"Le plateau te regarde avec compassion.",
		"T'as pas perdu, t'as juste offert un spectacle.",
		"Le cerveau tourne √† fond, mais pas dans le bon sens.",
		"Tu poses des jetons comme Picasso peignait : sans plan pr√©cis.",
		"T'es un pionnier du move impr√©visible.",
		"Le suspense est r√©el, m√™me si la logique l'est moins.",
		"Chaque case vide est une promesse‚Ä¶ souvent bris√©e.",
		"Tu joues avec ton c≈ìur, pas avec ta t√™te.",
		"On reconna√Æt les grands joueurs √† leurs grandes erreurs.",
		"T'as confondu Puissance 4 et roulette russe.",
		"Le jeu est serr√©, mais ta logique aussi.",
		"T'as la vision, mais sans lunettes.",
		"Un coup digne des plus grands‚Ä¶ comiques.",
		"On sent que t'√©tais proche d'avoir raison.",
		"Tu fais douter les lois du jeu.",
		"Ton move a surpris tout le monde, m√™me toi.",
		"T'as cr√©√© une nouvelle strat√©gie : l'improvisation totale.",
		"L'adversaire panique, mais pour d'autres raisons.",
		"Ton jeton vient d'atterrir dans la l√©gende‚Ä¶ ou la honte.",
		"Tu joues comme un artiste abstrait.",
		"T'es un danger public pour les colonnes.",
		"Chaque tour est un po√®me d'incertitude.",
		"T'as la patience d'un moine et la logique d'un poulpe.",
		"La victoire approche, mais elle a pris un d√©tour.",
		"T'as mis√© sur le chaos, et le chaos t'a remerci√©.",
		"Ce coup‚Ä¶ personne n'aurait os√©.",
		"On voit la strat√©gie, mais faut la deviner.",
		"Tu fais r√™ver ton adversaire, surtout de gagner.",
		"Le plateau est t√©moin d'un concept r√©volutionnaire : la confusion tactique.",
		"T'as presque invent√© un nouveau jeu.",
		"Ton jeton a fait un beau voyage, c'est d√©j√† √ßa.",
		"T'as la passion, il te manque juste la pr√©cision.",
		"Chaque coup est une surprise, m√™me pour toi.",
		"Tu fais du Puissance 4 version freestyle.",
		"Le silence du plateau en dit long.",
		"T'es pas loin de la victoire‚Ä¶ g√©ographiquement.",
		"Ton move restera dans les m√©moires, mais pas pour les bonnes raisons.",
		"Le destin te teste, et il s'amuse bien.",
		"Tu joues comme si chaque coup √©tait le dernier ‚Äî et parfois, il l'est.",
		"T'as prouv√© que la logique, c'est surfait.",
		"Ce n'est pas une d√©faite, c'est une exp√©rience sociale.",
		"On ne gagne pas toujours, mais toi, tu marques les esprits.",
	}
	r := rand.Intn(100)
	phrasealeatoire := phrase[r]
	g.Encouragement = phrasealeatoire

}
